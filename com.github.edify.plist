<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>"/Applications/Install OS X El Capitan.app/Contents/Resources/startosinstall --nointeraction --volume /Volumes/Macintosh\ HD --applicationpath "/Applications/Install OS X El Capitan.app"</key>
	<string>Non-interactively update OS X to 10.11.</string>
	<key>/Library/Application\ Support/JAMF/bin/Management\ Action.app/Contents/MacOS/Management\ Action -message 'foo' -title 'bar' -subtitle 'baz' -sound default -open URL -activate com.apple.Terminal</key>
	<string>Jamf app to send notifications to notification center.</string>
	<key>/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper -help</key>
	<string>Jamf Helper options.</string>
	<key>/System/Library/CoreServices/Applications/Network\ Utility.app/Contents/Resources/stroke www.google.com 80 80</key>
	<string>Similar to nmap, scan a range of ports on a host.</string>
	<key>/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend</key>
	<string>Lock screen.</string>
	<key>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users foo,bar,baz -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw 'foo' -privs -all -restart -agent</key>
	<string>Activate screen sharing and include a VNC password.</string>
	<key>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users foo,bar,baz -privs -all -restart -agent</key>
	<string>Turn on screen sharing for admin users.</string>
	<key>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw 'foo' -privs -all -restart -agent</key>
	<string>Set the VNC password in screen sharing.</string>
	<key>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -configure -access -off</key>
	<string>Turn off Remote Management</string>
	<key>/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I</key>
	<string>Get information about the airport connection.</string>
	<key>/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -s</key>
	<string>Scan available wireless networks.</string>
	<key>/System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil enroll CATALOG</key>
	<string>Configure a software update appleseed catalog (CustomerSeed, DeveloperSeed, PublicSeed).</string>
	<key>/System/Library/PrivateFrameworks/SystemAdministration.framework/Versions/A/Resources/DirectoryTools -repairPermissions username</key>
	<string>Repair permissions of a given username. Useful when migrating local accounts.</string>
	<key>/usr/bin/AssetCacheLocatorUtil</key>
	<string>Get the caching server being used by this mac.</string>
	<key>/usr/bin/csrutil clear</key>
	<string>Reset SIP (10.12.2 and above)</string>
	<key>/usr/bin/defaults read /Library/Preferences/com.apple.alf globalstate</key>
	<string>Get the status of the firewall state (0 = off; 1 = on)</string>
	<key>/usr/bin/log show --predicate '(subsystem == "com.grahamgilbert.crypt")' --style syslog --debug --info --last 24h</key>
	<string>Show crypt logs.</string>
	<key>/usr/bin/open "x-apple.systempreferences:com.apple.preferences.softwareupdate?client=bau&amp;installMajorOSBundle=com.apple.InstallAssistant.Seed.macOS1015Seed1"</key>
	<string>Grab the Catalina seed installer.</string>
	<key>/usr/bin/security authorizationdb read system.login.console</key>
	<string>Read authorizationdb values.</string>
	<key>/usr/bin/security find-generic-password -l "Enterprise Connect" /Users/$loggedinuser/Library/Keychains/login.keychain | awk -F "=" '/acct/ {print $2}' | tr -d "\""</key>
	<string>Get the username from Enterprise Connect keychain entry.</string>
	<key>/usr/bin/xcode-select --install</key>
	<string>Prompt to install Xcode command line utilities.</string>
	<key>/usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/app</key>
	<string>Add application to firewall.</string>
	<key>/usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate</key>
	<string>Show firewall status.</string>
	<key>/usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off</key>
	<string>Disable firewall.</string>
	<key>/usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on</key>
	<string>Enable firewall.</string>
	<key>/usr/libexec/java_home</key>
	<string>Determine the version of Java being used.</string>
	<key>/usr/libexec/repair_packages --list-standard-pkgs</key>
	<string>Print the standard packages that repairPermissions will look at.</string>
	<key>/usr/local/jamf/bin/jamf help -hidden</key>
	<string>Show hidden jamf binary options.</string>
	<key>/usr/sbin/dseditgroup -o edit -a foo -t user admin</key>
	<string>Add a user to admin group.</string>
	<key>/usr/sbin/dseditgroup -o edit -a foo -t user com.apple.access_ssh</key>
	<string>Add a user to the ssh access group.</string>
	<key>/usr/sbin/scutil -w State:/Network/Global/DNS -t 180</key>
	<string>A way to wait for network to be active before proceeding in a script.</string>
	<key>Profiles -Lo stdout-xml</key>
	<string>Print the contents/settings of a config profile</string>
	<key>ac -p | sort -nrk 2 | awk 'NR == 2 { print $1; exit }'</key>
	<string>Returns the username of the user with longest time logged in.</string>
	<key>arp -ad</key>
	<string>Clears the arp cache.</string>
	<key>asr restore --source foo --target bar --erase --verbose --noprompt --noverify --buffers 1 --buffersize 32m --puppetstrings</key>
	<string>Full arguments for asr restores.</string>
	<key>atsutil databases -remove</key>
	<string>Removes all user-based and system font caches.</string>
	<key>atsutil databases -removeUser ; sudo atsutil databases -remove ; atsutil server -shutdown</key>
	<string>Clear font caches.</string>
	<key>atsutil server -ping</key>
	<string>Starts the Apple Type Services service.</string>
	<key>atsutil server -shutdown</key>
	<string>Stops the Apple Type Services service.</string>
	<key>auth sufficient pam_tid.so</key>
	<string>Add to /etc/pam.d/sudo to allow Touch ID</string>
	<key>autopkg repo-list |awk -F'(' '{print $2}' |tr -d \)</key>
	<string>List current autopkg repos.</string>
	<key>bash &lt;(curl -sL http://url/script)</key>
	<string>Run bash command over http in Recovery Mode. (Don't do this).</string>
	<key>bless --folder /System/Library/CoreServices/ --setBoot</key>
	<string>Bless a system folder (helpful for encrypting APFS boot volumes in Fusion)</string>
	<key>bless --netboot --server bsdp://IP.Address</key>
	<string>Bless a netboot server.</string>
	<key>caffeinate -s command -with arguments</key>
	<string>Allow a command to run for a prolonged period without sleep.</string>
	<key>caffeinate -u -t 3600</key>
	<string>Prevent Mac from falling asleep for an hour.</string>
	<key>chef-shell -z -c /etc/chef/client.rb</key>
	<string>Run chef in interactive mode including all resources.</string>
	<key>chsh -s /bin/zsh</key>
	<string>Change default shell to zsh.</string>
	<key>codesign --display /Applications/Foo.app</key>
	<string>Display the exectuable of an app.</string>
	<key>codesign -dr - /Applications/Foo.app</key>
	<string>Return the anchor cert for an app (useful for TCC/PPPC)</string>
	<key>codesign -dv --verbose=4 /Applications/Foo.app</key>
	<string>Check code signing for an app.</string>
	<key>codesign -dvvv /Applications/Foo.app</key>
	<string>Verify signing of an application.</string>
	<key>command &gt; /dev/null 2&gt;&amp;1</key>
	<string>Bash redirect stdin and stderror to /dev/null.</string>
	<key>cp foo{,-bar}</key>
	<string>Use brackets to copy a file, renaming in place.</string>
	<key>cp foo{-bar,-baz}</key>
	<string>Use brackets to copy a file, making several backups, renaming in place.</string>
	<key>createhomedir -c</key>
	<string>Initiate home directories for local accounts.</string>
	<key>curl ipecho.net/plain</key>
	<string>Returns your external facing IP address. Ref: http://krypted.com/mac-security/grab-your-wan-ip-in-scripts/</string>
	<key>date "+%Y%m%d"</key>
	<string>Generate a numeric date for use in a script.</string>
	<key>dd if=/dev/random bs=16 count=1 2&gt;/dev/null | base64 | sed 's/=//g'</key>
	<string>Generate 128bit password.</string>
	<key>defaults delete /Library/Preferences/com.apple.SoftwareUpdate SUDisableEVCheck</key>
	<string>Disable the SUDisableEVCheck setting for softwareupdate.</string>
	<key>defaults delete /Library/Preferences/com.apple.seeding</key>
	<string>Remove the seeding pref for appleseed.</string>
	<key>defaults read /Applications/Foo.app/Contents.Info CFBundleShortVersionString</key>
	<string>Get the version no. of an app.</string>
	<key>defaults write /Library/Preferences/com.apple.SoftwareUpdate CatalogURL http://server.domain.com</key>
	<string>Change the SUS server, i.e. for use with Reposado.</string>
	<key>defaults write com.apple.Enterprise-Connect debugMode -bool true</key>
	<string>Enable debug mode for Enterprise Connect.</string>
	<key>defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true</key>
	<string>Enable airdrop.</string>
	<key>defaults write com.apple.ScreenSharing DoNotSendSystemKeys -bool YES</key>
	<string>Disable cmd-tab inside a Screen Sharing session.</string>
	<key>defaults write com.apple.TextEdit RichText -int 0</key>
	<string>Set TextEdit to use plain text by default.</string>
	<key>defaults write com.apple.desktopservices DSDontWriteNetworkStores true</key>
	<string>Keep from writing .DS_Store files to file servers.</string>
	<key>defaults write com.apple.finder QLEnableTextSelection -bool TRUE ; killall Finder</key>
	<string>Enable text selection in QuickLook.</string>
	<key>defaults write com.microsoft.autoupdate2 ExtendedLogging -bool TRUE</key>
	<string>Enable extended logging for Microsoft Autoupdate (MAU) tool.</string>
	<key>defaults write com.microsoft.autoupdate2 ExtendedLogging -bool true</key>
	<string>Turn on debug logging for Microsoft AutoUpdate (logs to /Library/Logs/Microsoft/autoupdate.log)</string>
	<key>df -h | awk '/disk1/ {print $1,$2,$3}'</key>
	<string>Print the device, available space, and used space for disk1.</string>
	<key>diff -y</key>
	<string>Display diff in split screen.</string>
	<key>dig +short myip.opendns.com @resolver1.opendns.com</key>
	<string>Return your external facing IP address.</string>
	<key>dig -t srv _ldap._tcp.DOMAIN | /usr/bin/awk '/^_ldap/{print $NF}'</key>
	<string>Return LDAP server information about DOMAIN.</string>
	<key>discoveryutil mdnsflushcache</key>
	<string>Reset the DNS cache (10.10) (Multicast).</string>
	<key>discoveryutil udnsflushcache</key>
	<string>Reset the DNS cache (10.10) (Unicast).</string>
	<key>diskutil info `bless --getBoot` |sed '/^ *Volume Name: */!d;s###'</key>
	<string>Return the current boot drive.</string>
	<key>diskutil mount disk0s3 &gt; /dev/null 2&gt;&amp;1 ; defaults read /Volumes/Recovery\ HD/com.apple.recovery.boot/SystemVersion.plist ProductVersion ; diskutil unmount disk0s3 &gt; /dev/null 2&gt;&amp;1</key>
	<string>Check the OS version of the current recovery partition.</string>
	<key>dns-sd -B _net-assistant._udp . &gt;&gt; /tmp/ARDhosts; cat /tmp/ARDhosts |  awk -F"._udp." '{print $2}' | sort | uniq</key>
	<string>Discover Macs on the network; run for 30 seconds and cancel to print results.</string>
	<key>dscacheutil -q host -a name foo |awk -F': ' '/ip_address/ {print $2}'</key>
	<string>Get IP of a host.</string>
	<key>dscacheutil -q user -a name foo</key>
	<string>Get lookup info on user 'foo'.</string>
	<key>dscl -f /Volumes/Macintosh\ HD\ -\ Data/private/var/db/dslocal/nodes/Default localhost -passwd /Local/Default/Users/root</key>
	<string>Enable root account in Recovery</string>
	<key>dscl . list /Users UniqueID | awk '$2 &gt; 500 { print $1 }'</key>
	<string>List all user accounts with UID greater than 500.</string>
	<key>dscl . passwd /Users/foo ""</key>
	<string>Set a blank password for user foo.</string>
	<key>dscl localhost read /Search/Users/$USER msDSUserPasswordExpiryTimeComputed</key>
	<string>Return the expiration date of an Active Directory user.</string>
	<key>dsconfigad -force -remove -u foo -p bar</key>
	<string>Unbind from AD.</string>
	<key>dsconfigad -show | awk '/Active Directory Domain/{print $NF}'</key>
	<string>Return the AD domain.</string>
	<key>dseditgroup -o create -q com.apple.access_ssh</key>
	<string>Create an SSH access group.</string>
	<key>dseditgroup -o delete -t group com.apple.access_ssh</key>
	<string>Delete an existing SSH access group.</string>
	<key>dseditgroup -o edit -a "DOMAIN\Domain Admins" -t group com.apple.access_ssh</key>
	<string>Add a group to the SSH access group.</string>
	<key>dsmemberutil checkmembership -U username -G admin</key>
	<string>Check if user 'username' is an admin account.</string>
	<key>du -ch -d 1 /foo</key>
	<string>Print filesystem usage in human readable format, with a depth of one directory.</string>
	<key>echo "add State:/Network/Interface/en0/RefreshConfiguration temporary" | sudo scutil</key>
	<string>Renew DHCP lease in a script (triggers network change events, crankd, etc)</string>
	<key>echo "show State:/Network/Global/IPv4" | scutil | awk '/PrimaryInterface/ {print $3}'</key>
	<string>Get the default network interface (en0, etc).</string>
	<key>echo '{"json":"obj"}' | python -mjson.tool</key>
	<string>Validate json object with pretty-print.</string>
	<key>fdesetup status</key>
	<string>Get status of filevault.</string>
	<key>find . -name .DS_Store -exec rm -f {} \;</key>
	<string>Delete .DS_Store files.</string>
	<key>find . -type f -size +1G -exec rm {} +</key>
	<string>Find files larger than 1GB and delete them.</string>
	<key>find . -type f 2&gt;/dev/null | while read A; do md5 -q $A 2&gt;/dev/null; done | uniq -d</key>
	<string>Check for duplicate files in the current directory.</string>
	<key>find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'</key>
	<string>Show App Store apps.</string>
	<key>find foo -name bar -type f -exec rm -rf "{}" \;</key>
	<string>search directory foo for files named bar and delete them.</string>
	<key>for i in ~/.ssh/*.pub; do ssh-keygen -l -f "$i"; done</key>
	<string>Check ssh key finderprint.</string>
	<key>fs_usage -e -www</key>
	<string>More detailed fs_usage output.</string>
	<key>getconf DARWIN_USER_DIR</key>
	<string>Return the directory where certain user settings such as notification center prefs are stored.</string>
	<key>git clone git@github.com:username/repo_name.wiki.git</key>
	<string>Clone a github wiki.</string>
	<key>git commit --amend</key>
	<string>f the commit you want to squash into is the last commit, you can even directly add new changes to it by using the --amend flag when committing.</string>
	<key>git diff --name-status</key>
	<string>Finding which files differ (instead of what differs inside files).</string>
	<key>git diff --word-diff</key>
	<string>Diff by highlighting inline word changes instead of whole lines.</string>
	<key>git gc</key>
	<string>Compress and clean up the repo.</string>
	<key>git log --grep=[search term]</key>
	<string>Search commit logs.</string>
	<key>git log --oneline --decorate</key>
	<string>Show branches and tags in a simple git log.</string>
	<key>git log --pretty=format:'%C(yellow)%h%C(reset) %s %C(cyan)%cr%C(reset) %C(blue)%an%C(reset) %C(green)%d%C(reset)' --graph --date-order</key>
	<string>Print out a readable git log.</string>
	<key>git rebase -i HEAD~2</key>
	<string>Squash the last two commits into one, useful for fixing silly errors.</string>
	<key>git reset</key>
	<string>Un-stages files staged for commits ONLY, so all your changes are still there.</string>
	<key>git reset --hard</key>
	<string>Cear all un-committed changes and revert back all your files to the state reflected by your last commit. DESTRUCTIVE.</string>
	<key>git reset --hard HEAD~2</key>
	<string>Delete a commit forever and ever.</string>
	<key>git show :/^Merge</key>
	<string>Shows the last merge commit.</string>
	<key>git show :/fix</key>
	<string>Show the last commit with the string 'fix'.</string>
	<key>git status -sb</key>
	<string>Show short status output in git.</string>
	<key>grep "\s69/" /etc/services</key>
	<string>See what is running on a port, for example, port 69.</string>
	<key>hdiutil attach -noverify -noautofsck ~/Desktop/Backup\ copy.dmg -shadow</key>
	<string>Mount a damaged disk image, to attempt to recover data.</string>
	<key>hdiutil attach dmg -mountpoint /tmp/name -nobrowse -noverify -noautoopen</key>
	<string>Mount dmg hidden from view.</string>
	<key>hdiutil create -volname foo -fs HFS+ -size 10m foo.dmg</key>
	<string>Create a new disk image.</string>
	<key>history | awk '{print $2}' | awk 'BEGIN{FS="|"}{print $1}' | sort | uniq -c | sort -n | tail -n 20 | sort -nr</key>
	<string>Return a sorted list of your most used commands.</string>
	<key>ifconfig en1 down &amp;&amp; ifconfig en1 up</key>
	<string>Renew DHCP lease.</string>
	<key>installer -showChoicesXML -pkg /path/to/foo.pkg</key>
	<string>Display the showChoicesXML information for a given package.</string>
	<key>ioreg -c IOPlatformExpertDevice -d 2 |awk '/IOPlatformSerialNumber/ {print $3}' |sed s/\"//g</key>
	<string>Get serial number of current Mac.</string>
	<key>ioreg -c IOPlatformExpertDevice -d 2 |awk '/IOPlatformUUID/ {print $3}' |sed s/\"//g </key>
	<string>Get uuid of the current Mac.</string>
	<key>iostat -d disk0</key>
	<string>Display device io statistics.</string>
	<key>ipconfig getifaddr en0</key>
	<string>Get IP address for en0.</string>
	<key>ipconfig getoption en0 domain_name_server</key>
	<string>Get the DNS server for en0.</string>
	<key>ipconfig getoption en0 subnet_mask</key>
	<string>Get subnet mask for en0.</string>
	<key>ipconfig getpacket en0</key>
	<string>Get DHCP information for en0.</string>
	<key>ipconfig set en1 BOOTP &amp;&amp; ipconfig set en1 DHCP</key>
	<string>Renew DHCP lease.</string>
	<key>jamf killJAMFHelper</key>
	<string>Kill the JAMFHelper process in a script.</string>
	<key>kextload -b foo</key>
	<string>Load kernel extension.</string>
	<key>kextstat -l</key>
	<string>List status of loaded kernel extensions.</string>
	<key>kextunload -b</key>
	<string>Unload kernel extension.</string>
	<key>killall ControlStrip</key>
	<string>Restart the Touch Bar Control Strip dingus.</string>
	<key>killall cfprefsd</key>
	<string>Restart the cfprefsd process.</string>
	<key>launchctl asuser &lt;user&gt; /bin/launchctl load /Library/LaunchAgents/com.foo.launchagent.plist</key>
	<string>Enable a launchagent as a user when run as root (deprecated in 10.10).</string>
	<key>launchctl bootout gui/&lt;UID&gt; /Library/LaunchAgents/com.foo.launchagent.plist</key>
	<string>Unload a LaunchAgent in the GUI domain (10.11 and up).</string>
	<key>launchctl bootstrap gui/&lt;UID&gt; /Library/LaunchAgents/com.foo.launchagent.plist</key>
	<string>Load a LaunchAgent giving the full path to the service plist (10.10 and up).</string>
	<key>launchctl bootstrap gui/&lt;UID&gt;/&lt;service-name&gt;</key>
	<string>Load a LaunchAgent in the GUI domain, passing the service name (10.10 and up).</string>
	<key>launchctl bootstrap system/&lt;service-name&gt; /Library/LaunchAgents/com.foo.launchagent.plist</key>
	<string>Load a LaunchDaemon as root (10.10 and up).</string>
	<key>launchctl bootstrap user/&lt;UID&gt;/&lt;service-name&gt; /Library/LaunchAgents/com.foo.launchagent.plist</key>
	<string>Load a LaunchAgent in the user domain, passing the service name (10.10 and up).</string>
	<key>launchctl disable gui/&lt;UID&gt;/com.foo.launchagent</key>
	<string>Disable a LaunchAgent in the GUI user space (10.10 and up). Process will not load again until it's enabled.</string>
	<key>launchctl kill SIGKILL gui/&lt;UID&gt;/com.foo.launchagent</key>
	<string>Kill a launchd service or agent. Example sigs: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/signal.3.html</string>
	<key>launchctl list</key>
	<string>List daemons and agents (deprecated in 10.10).</string>
	<key>launchctl load -w /Library/LaunchDaemons/com.foo.launchdaemon.plist</key>
	<string>Enable and load a LaunchDaemon (deprecated in 10.10).</string>
	<key>launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist</key>
	<string>configure apache to start at load</string>
	<key>launchctl load /Library/LaunchDaemons/com.foo.launchdaemon.plist</key>
	<string>Load a LaunchDaemon (deprecated in 10.10).</string>
	<key>launchctl print gui/&lt;UID&gt;</key>
	<string>List info about daemons and agents (10.10 and up).</string>
	<key>launchctl print gui/&lt;UID&gt;/com.foo.launchagent</key>
	<string>Print info about a specific LaunchAgent (10.10 and up).</string>
	<key>launchctl print system</key>
	<string>List info about root level services (10.10 and up).</string>
	<key>launchctl reboot -s system</key>
	<string>Reboot into single-user mode.</string>
	<key>launchctl reboot halt</key>
	<string>Shut down system immediately (10.10 and up).</string>
	<key>launchctl reboot logout</key>
	<string>Kill the GUI login session, suppressing any modal dialogs to block logout.</string>
	<key>launchctl reboot system</key>
	<string>Reboot system immediately (10.10 and up).</string>
	<key>launchctl reboot userspace</key>
	<string>Reconstruct user domain (simulates a reboot) (10.10 and up).</string>
	<key>launchctl stop com.apple.softwareupdated &amp;&amp; launchctl start com.apple.softwareupdated</key>
	<string>Restart the softwareupdated process</string>
	<key>launchctl unload -w /Library/LaunchDaemons/com.foo.launchdaemon.plist</key>
	<string>Disable and unload a LaunchDaemon (deprecated in 10.10).</string>
	<key>launchctl unload /Library/LaunchDaemons/com.foo.launchdaemon.plist</key>
	<string>Unload a LaunchDaemon (deprecated in 10.10).</string>
	<key>less +F</key>
	<string>Similar to tail -f, but can ctrl-c out to vim mode.</string>
	<key>ln -s original link</key>
	<string>Create a symlink.</string>
	<key>log show --debug --info --signpost --predicate 'subsystem contains "com.apple.unc"'</key>
	<string>View Notification Center logs to determine the correct bundleidentifier to whitelist.</string>
	<key>log show --debug --predicate 'subsystem == "com.apple.TCC" AND eventMessage BEGINSWITH "AttributionChain"'</key>
	<string>View AttributionChain logs to determine the correct bundleidentifier to whitelist.</string>
	<key>log show -predicate 'eventMessage contains "error"'</key>
	<string>Display logs with an error string.</string>
	<key>log stream --debug --predicate 'subsystem == "com.apple.TCC"</key>
	<string>Show TCC log events.</string>
	<key>logger -is</key>
	<string>Log the process id and message to stderr and syslog.</string>
	<key>lpadmin -p "$printer_name" -o printer-is-shared=false</key>
	<string>Disable printer sharing for a printer.</string>
	<key>ls -l |grep *.pdf |wc -l </key>
	<string>Count the number of files in the current working directory, for example PDF files.</string>
	<key>ls -l |grep ^- |wc -l </key>
	<string>Count the number of regular files in the current working directory.</string>
	<key>ls -l |grep ^d |wc -l</key>
	<string>Count the number of directories in the current working directory.</string>
	<key>ls /usr/{,local}/{,s}bin/foo</key>
	<string>Use brackets to list files in four different directories in the same tree.</string>
	<key>lsbom -p UGMsF /var/db/receipts/foo.pkg.bom</key>
	<string>Print the bill of materials for a package.</string>
	<key>lsof -P -i -n | cut -f 1 -d " " | uniq</key>
	<string>Display a list of all of the applications which have connected to the Internet.</string>
	<key>lsof -n -i4TCP</key>
	<string>List all ports.</string>
	<key>lsof -n -i4TCP |grep LISTEN</key>
	<string>List all ports that are listening on a host.</string>
	<key>lsof | awk '/.Trash\//{print $2}' | xargs kill</key>
	<string>Kill the lingering process that is preventing emptying the trash.</string>
	<key>macosguest.forceRecoveryModeInstall = "TRUE"</key>
	<string>Add this to your vmx file to boot VM to recovery.</string>
	<key>man diskutil | col -bx &gt; /path/to/diskutil.txt</key>
	<string>Export manpage to a text file, with formatting.</string>
	<key>mdfind -live foo</key>
	<string>Spotlight search, updating in real time.</string>
	<key>mdfind -name foo</key>
	<string>Spotlight search, matching filenames only.</string>
	<key>mdfind -onlyin ~/Documents foo</key>
	<string>restrict search to a single directory.</string>
	<key>mdfind foo</key>
	<string>Run spotlight from cli.</string>
	<key>mdls -name kMDItemFSCreationDate /path/to/foo |awk -F' = ' '{print $2}'</key>
	<string>Return the creation date of a file.</string>
	<key>mdls -name kMDItemLastUsedDate /Applications/Safari.app</key>
	<string>Check the last time an app was used.</string>
	<key>mdmclient QueryInstalledProfiles</key>
	<string>Return information about configuration profiles.</string>
	<key>mdutil -E</key>
	<string>erase spotlight index and rebuild it from scratch.</string>
	<key>mdutil -a -i off</key>
	<string>Turn spotlight off.</string>
	<key>mdutil -d /</key>
	<string>Disable spotlight for volume.</string>
	<key>mdutil -i off </key>
	<string>turn off spotlight indexing.</string>
	<key>mdutil -s /</key>
	<string>Check status of spotlight.</string>
	<key>mkdir -p foo/{bar,baz}</key>
	<string>Make multiple directories in one go.</string>
	<key>mktemp -d /tmp/foo.XXXX</key>
	<string>Create a temporary directory.</string>
	<key>mount_smbfs //'domain;username'@foo.domain.com/bar /Volumes/bar</key>
	<string>Mount SMB share using domain credentials.</string>
	<key>nc -v -w 15 www.google.com 80</key>
	<string>Print out info about a network connection, with a defined timeout.</string>
	<key>nc -v www.google.com 80</key>
	<string>Print out info about a network connection.</string>
	<key>netstat -I en0 -b |tail -1 |awk '{print $10}'</key>
	<string>Print the network output in byes.</string>
	<key>netstat -I en0 -b |tail -1 |awk '{print $7}'</key>
	<string>Print the network input in bytes.</string>
	<key>netstat -i</key>
	<string>Show interfaces.</string>
	<key>netstat -n |grep 5900</key>
	<string>See open ARD connections.</string>
	<key>netstat -nr</key>
	<string>Print routing table.</string>
	<key>netstat -nr |grep -m 1 -iE 'default|0.0.0.0' |awk '{print $2}'</key>
	<string>Get subnet mask for primary interface.</string>
	<key>netstat -nr |grep -m 1 -iE 'default|0.0.0.0' |awk '{print $6}'</key>
	<string>Get primary interface device.</string>
	<key>netstat -p udp</key>
	<string>Show stats for one protocol.</string>
	<key>netstat -s</key>
	<string>Show per-protocol stats.</string>
	<key>nettop -m route</key>
	<string>Show network route table.</string>
	<key>networksetup -listallhardwareports</key>
	<string>Print out network service names, device, and ports.</string>
	<key>networksetup -listallnetworkservices</key>
	<string>Print out network service names.</string>
	<key>networksetup -ordernetworkservices 'Wi-Fi' 'USB Ethernet'</key>
	<string>Change network interface order.</string>
	<key>networksetup -printcommands</key>
	<string>List out all networksetup subcommands.</string>
	<key>networksetup -setdhcp Wi-Fi</key>
	<string>Set an interface to DHCP.</string>
	<key>networksetup -setdnsservers Wi-FI 10.0.0.2 10.0.0.3</key>
	<string>Set DNS servers explicitely.</string>
	<key>networksetup -setmanual Wi-Fi 10.0.0.2 255.255.255.0 10.0.0.1</key>
	<string>Configure IP, subnet, and gateway.</string>
	<key>networksetup -setnetworkserviceenabled off</key>
	<string>Disable a network service.</string>
	<key>networksetup -setsearchdomains INTERFACE empty</key>
	<string>Use 'empty' to clear the manually-set search domains'</string>
	<key>nvram -p</key>
	<string>Display all nvram variables.</string>
	<key>nvram internet-recovery-mode=DiagsModeDisk</key>
	<string>Boot to Local Apple Hardware Diagnostic (D)</string>
	<key>nvram internet-recovery-mode=DiagsModeNetwork</key>
	<string>Boot to Internet/AST diagnostic (OPT-D)</string>
	<key>nvram internet-recovery-mode=RecoveryModeDisk</key>
	<string>Boot to Recovery (CMD-R)</string>
	<key>nvram internet-recovery-mode=RecoveryModeNetwork</key>
	<string>Boot to Internet Recovery (CMD-OPT-R)</string>
	<key>nvram recovery-boot-mode=unused</key>
	<string>Reboot into recovery mode.</string>
	<key>odutil set log debug</key>
	<string>Set debug log for opendirectoryd.</string>
	<key>odutil show nodenames</key>
	<string>Show offline connections.</string>
	<key>open "x-apple.systempreferences:com.apple.preferences.softwareupdate?client=bau&amp;installMajorOSBundle=com.apple.InstallAssistant.Mojave"</key>
	<string>Download Mojave beta.</string>
	<key>open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app</key>
	<string>Start screensaver.</string>
	<key>open macappstore://showUpdatesPage</key>
	<string>Launch the Mac App Store and load the updates pane.</string>
	<key>openssl enc -aes-256-cbc -d -in foo.enc -out foo.decrypted</key>
	<string>Decrypt a file encrypted with openssl.</string>
	<key>openssl enc -aes-256-cbc -salt -in foo -out foo.enc</key>
	<string>Encrypt a file with a password.</string>
	<key>openssl sha1 /path/to/foo.dmg</key>
	<string>Verify the SHA1 digest of a downloaded file, such as an update from Apple support.</string>
	<key>openssl x509 -checkend 0 -noout -in /path/to/cert.pem</key>
	<string>Check validity of a cert.</string>
	<key>osascript -e 'set volume output muted true'</key>
	<string>Mute the volume using applescript.</string>
	<key>osqueryi --disable_extensions --disable_events --flagfile=</key>
	<string>Run osquery without debug output.</string>
	<key>perl -i -pe's/\r$//;' foo</key>
	<string>Change windows (DOS) style line endings to unix.</string>
	<key>pgrep Chrome | wc -l</key>
	<string>See processes by a specific app, for example Chrome.</string>
	<key>pgrep Safari</key>
	<string>Get the process of a running app.</string>
	<key>pkgutil --file-info /path/to/file</key>
	<string>See which package installed a file or binary.</string>
	<key>pkgutil --files pkg-id</key>
	<string>Show all files installed by pkg-id.</string>
	<key>pkgutil --forget pkg-id</key>
	<string>Remove receipts to trigger re-install of package.</string>
	<key>pkgutil --pkg-info pkg-id</key>
	<string>Print extended info about pkg-id.</string>
	<key>pkgutil --pkgs</key>
	<string>List all installed package IDs (use -volume to use a different volume than boot).</string>
	<key>pkill Safari</key>
	<string>Kill the process of a running app.</string>
	<key>plutil -convert binary1 bar.plist</key>
	<string>Convert an XML plist file to binary.</string>
	<key>plutil -convert xml1 foo.plist</key>
	<string>Convert a binary plist to XML format for editing.</string>
	<key>plutil -lint /Library/Preferences/com.apple.loginwindow.plist</key>
	<string>Check plist for errors.</string>
	<key>pmset -g</key>
	<string>See all current power management settings.</string>
	<key>printenv</key>
	<string>Print all environment variables.</string>
	<key>printf '\xf0\x9f\x92\xa9\n'</key>
	<string>Print poo emoji (hat tip https://twitter.com/macmuleblog/status/581452235617484800).</string>
	<key>profiles -D</key>
	<string>Remove all profiles.</string>
	<key>profiles -I -F /path/to/profile</key>
	<string>Manually install profile.</string>
	<key>profiles -L</key>
	<string>See user profiles.</string>
	<key>profiles -P</key>
	<string>See all profiles, aggregated.</string>
	<key>profiles renew -type enrollment</key>
	<string>Trigger DEP enrollment prompt.</string>
	<key>profiles status -type enrollment</key>
	<string>Determine if a machine is enrolled in MDM, and if UAMDM.</string>
	<key>ps -A -o pid,nice,command</key>
	<string>Prints a process list including the nice value.</string>
	<key>ps lauxww</key>
	<string>Include the parent process (ppid) in the output.</string>
	<key>pwpolicy -u foo -setpolicy "newPasswordRequired=1"</key>
	<string>Require a new password for local user foo.</string>
	<key>pydoc -g</key>
	<string>Open python docs in a browser.</string>
	<key>python -c "import site; print site.getsitepackages()"</key>
	<string>Display the site-packages directories used by python.</string>
	<key>python -c 'import this'</key>
	<string>Print the Zen of Python.</string>
	<key>python -m SimpleHTTPServer 8000</key>
	<string>Run a simple python webserver.</string>
	<key>qlmanage -p foo</key>
	<string>Invoke QuickLook from the command line.</string>
	<key>route -n add 10.0.0.0/32 10.0.9.2</key>
	<string>Add a route for a network to use a specific device.</string>
	<key>rsync -avPE src host:dest</key>
	<string>rsync Mac OS file attributes.</string>
	<key>ruby -e 'key = [125, 137, 82, 35, 210, 188, 221, 234, 163, 185, 31]; IO.read("/etc/kcpassword").bytes.each_with_index { |b, i| print [b ^ key[i % key.size]].pack("U*") }'</key>
	<string>Reverse password from kcpassword file.</string>
	<key>screencapture -C -M image.png</key>
	<string>capture contents of the screen and attach to a mail message.</string>
	<key>screencapture -C screenshot.png</key>
	<string>Capture screen and save to a file.</string>
	<key>screencapture -c -W</key>
	<string>capture window using mouse, without drop shadow and copy to clipboard.</string>
	<key>screencapture -s -t pdf image.pdf</key>
	<string>select a portion of the screen with the mouse and save as a pdf.</string>
	<key>scutil --dns</key>
	<string>Prints the current dns configuration.</string>
	<key>scutil -r foo</key>
	<string>Check if host 'foo' is reachable.</string>
	<key>security cms -D -i foo.mobileconfig</key>
	<string>Convert mobileconfig file to xml.</string>
	<key>sed '/^$/d' file.txt</key>
	<string>Remove empty lines from a file (via http://krypted.com/mac-os-x/remove-empty-lines-from-a-file/)</string>
	<key>sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' foo.txt</key>
	<string>Convert a list of MAC addresses to include colons.</string>
	<key>serverinfo --buildversion</key>
	<string>Returns the build version of Server.app.</string>
	<key>serverinfo --configured</key>
	<string>See if the Server.app assistant has been run.</string>
	<key>serverinfo --hardware</key>
	<string>Check if the machine is running OS X Server.</string>
	<key>serverinfo --plist</key>
	<string>Output Server.app config to xml.</string>
	<key>serverinfo --prefix</key>
	<string>Show server root.</string>
	<key>serverinfo --shortversion</key>
	<string>Returns the short version no. of Server.app.</string>
	<key>serverinfo --software</key>
	<string>See if Server.app is installed.</string>
	<key>spctl -a -t exec -vv /Applications/Foo.app</key>
	<string>Check to see if an app is allowed with Gatekeeper.</string>
	<key>sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'</key>
	<string>Delete history of files with the quarantine bit (i.e. files that have been downloaded).</string>
	<key>sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'select LSQuarantineDataURLString from LSQuarantineEvent' | sort</key>
	<string>Show a full list of files with the quarantine extended attribute (i.e. files that have been downloaded).</string>
	<key>ssh -K -L5900:127.0.0.1:5900 user@server</key>
	<string>Use an ssh tunnel.</string>
	<key>ssh -o PreferredAuthentications="password" user@host</key>
	<string>Bypass key-based auth, useful for testing your password.</string>
	<key>ssh -t username@server 'foo'</key>
	<string>Run command 'foo' on remote server.</string>
	<key>stat -f%Su /dev/console</key>
	<string>Get currently logged in user.</string>
	<key>stat -f%u /dev/console</key>
	<string>Get the currently logged in user's uid.</string>
	<key>stat -x /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.meta.plist | awk -F': ' '/Modify/ {print $2,$3,$4,$5,$6}'</key>
	<string>Get the modification date of the XProtect plist (when it was last updated).</string>
	<key>stat -x foo</key>
	<string>Get info on a file.</string>
	<key>sudo /Applications/Install\ OS\ X\ Mavericks.app/Contents/Resources/createinstallmedia --volume /path/to/media --applicationpath /Applications/Install\ OS\ X\ Mavericks.app --nointeraction</key>
	<string>Create Mavericks install media.</string>
	<key>sudo /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user</key>
	<string>Reset launch services database.</string>
	<key>sudo chflags nouchg foo</key>
	<string>Remove immutable attribute flag, similar to chattr in linux.</string>
	<key>sudo chflags uchg foo</key>
	<string>Make a file immutable, similar to chattr in linux.</string>
	<key>sudo defaults write /Library/Preferences/SystemConfiguration/autodiskmount AutomountDisksWithoutUserLogin -bool true</key>
	<string>Set system to mount secondary or external drives at the login screen. Useful for headless systems.</string>
	<key>sudo defaults write /Library/Preferences/com.apple.loginwindow PasswordExpirationDays 0</key>
	<string>Turn off OS warning for password expirations.</string>
	<key>sudo dscacheutil -flushcache</key>
	<string>Reset the DNS cache (10.6).</string>
	<key>sudo fdesetup authrestart</key>
	<string>Bypass filevalut pre-boot loginwindow.</string>
	<key>sudo fs_usage -e -f filesystem | grep -v CACHE_HIT | grep -v grep | grep open</key>
	<string>List files as they are being opened.</string>
	<key>sudo fs_usage -e -f filesystem | grep -v CACHE_HIT | grep -v grep | grep write</key>
	<string>List files as they are being written to disk.</string>
	<key>sudo fs_usage -f network Safari</key>
	<string>List network related events.</string>
	<key>sudo fs_usage Finder</key>
	<string>Watch Finder activity.</string>
	<key>sudo iotop</key>
	<string>Part of dtrace, presents a top-like listing. On a sluggish machine, one could track the drive activity to determine what was slowing a system down.</string>
	<key>sudo killall -HUP mDNSResponder</key>
	<string>Reset the DNS cache (10.7+).</string>
	<key>sudo mdutil -E /Volumes/foo</key>
	<string>Force spotlight index to be rebuilt.</string>
	<key>sudo nvram boot-args="-v"</key>
	<string>Turn on verbose boot.</string>
	<key>sudo nvram boot-args="-x -v"</key>
	<string>Boot into Safe Mode and Verbose Mode simultaneously.</string>
	<key>sudo opensnoop -f /etc/passwd</key>
	<string>Watch a file.</string>
	<key>sudo opensnoop -n Finder</key>
	<string>Watch files being opened by a process.</string>
	<key>sudo opensnoop -p PID</key>
	<string>Watch a process.</string>
	<key>sudo osascript -e 'set volume 10'</key>
	<string>Max out the volume using applescript.</string>
	<key>sudo pkill -U user Foo</key>
	<string>Kill specific process by name 'Foo'.</string>
	<key>sudo pmset -a hibernatemode 0</key>
	<string>Disable safe sleep mode. If you want safe sleep mode back, just change the '0' to a '3'.</string>
	<key>sudo route -n flush &amp;&amp; sudo networksetup -setv4off Wi-Fi &amp;&amp; sudo networksetup -setdhcp Wi-Fi</key>
	<string>Flush routing table and reset network device.</string>
	<key>sudo rwsnoop -p PID</key>
	<string>Part of dtrace, observes read and writes at the application level. Very verbose, and hooked into the kernel, so very accurate.</string>
	<key>sudo scutil --set ComputerName foo</key>
	<string>Set the localhost and sharing name.</string>
	<key>sudo scutil --set HostName foo</key>
	<string>Set the localhost and sharing name.</string>
	<key>sudo scutil --set LocalHostName foo</key>
	<string>Set the localhost and sharing name.</string>
	<key>sudo sharing -a /Path/to/foo</key>
	<string>Share a directory from the command line (afp, smb, ftp).</string>
	<key>sudo sharing -e /Path/to/folder -g 000</key>
	<string>Turn off guest access to newly-created share.</string>
	<key>sudo sharing -r /Path/to/foo</key>
	<string>Turn off sharing entirely for a directory.</string>
	<key>sudo spctl --master-disable</key>
	<string>Disable Gatekeeper enforcement globally.</string>
	<key>sudo tail -40 -f /var/log/system.log</key>
	<string>Tail syslog with a buffer of 40 lines.</string>
	<key>sudo tcpdump -i pktap,all -w dns_$(date +%Y%m%d).pcap -s0 udp port 53</key>
	<string>Print network traffic to file (dns in this case).</string>
	<key>sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app</key>
	<string>Remove the quarantine bit from downloaded apps.</string>
	<key>sudo xcrun cc</key>
	<string>License the Xcode command line utilities.</string>
	<key>sysadminctl -deleteUser foo</key>
	<string>Cleanly delete a user (alternative to using dscl).</string>
	<key>sysctl -n hw.model</key>
	<string>Return the hardware model identifier.</string>
	<key>sysdiagnose -f ~/Desktop/</key>
	<string>Get system and performance report.</string>
	<key>syslog -k Time ge -24h | egrep -e 'sudo'</key>
	<string>Check syslog for sudo attempts in the last day.</string>
	<key>system_profiler -listDataTypes</key>
	<string>List all Data Types available in system_profiler.</string>
	<key>system_profiler SPHardwareDataType</key>
	<string>Print hardware information from system profiler.</string>
	<key>system_profiler SPPowerDataType | grep -i Cycle | awk -F: '{print $2}'</key>
	<string>Return battery cycle count.</string>
	<key>system_profiler SPSoftwareDataType |awk -F': ' '/Boot Volume/{print $2}'</key>
	<string>Show current boot drive.</string>
	<key>systemsetup -getstartupdisk</key>
	<string>Get current startup disk.</string>
	<key>systemsetup -liststartupdisks</key>
	<string>List available startup disks (via http://krypted.com/mac-security/dont-use-bless-to-change-startup-disks-any-more-in-os-x/)</string>
	<key>systemsetup -setremotelogin on</key>
	<string>Enable SSH.</string>
	<key>systemsetup -setstartupdisk /Volumes/MyMac</key>
	<string>Set startup disk (via http://krypted.com/mac-security/dont-use-bless-to-change-startup-disks-any-more-in-os-x/)</string>
	<key>tar cvfj foo.tar.bz2 ./foo</key>
	<string>Create a compressed archive.</string>
	<key>tar tvzf ./foo.tar.bz2</key>
	<string>List a compressed archive.</string>
	<key>tar xvfj ./foo.tar.bz2</key>
	<string>Uncompress an archive.</string>
	<key>tcpdump -nS</key>
	<string>Do a basic traffic capture.</string>
	<key>tcpdump -nnvvXS</key>
	<string>Print verbose traffic with data.</string>
	<key>tcpdump -nnvvXs 548</key>
	<string>Print verbose traffic, with port specified.</string>
	<key>tcpdump -nnvvXs 548 dst 10.0.0.2</key>
	<string>Print verbose traffic, with port and destination specified.</string>
	<key>tcpdump -nnvvXs 548 dst 10.0.0.2 -w /tmp/dump.pcap</key>
	<string>Print traffic to file.</string>
	<key>tcpdump -qns 0 -A -r /tmp/dump.pcap</key>
	<string>Read file into tcpdump.</string>
	<key>telnet towel.blinkenlights.nl 666</key>
	<string>Return a handy line from the BOFH Excuse Server.</string>
	<key>time read</key>
	<string>Run a simple stopwatch. Press enter to stop.</string>
	<key>time read -t 60</key>
	<string>Run a simple timer, counting down N seconds.</string>
	<key>top -d -u -s 10</key>
	<string>Run top, showing changes since last refresh, delayed by 10 seconds.</string>
	<key>touch -t 202001010000 /path/to/file</key>
	<string>Edit the access and modify times of a file.</string>
	<key>touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress</key>
	<string>Trigger Command Line Tools install</string>
	<key>touch foo{bar,baz}</key>
	<string>Use brackets to create similarly named files.</string>
	<key>traceroute -d google.com</key>
	<string>Print verbose debugging info.</string>
	<key>traceroute -m 100 216.81.59.173 | awk '{print $2}'</key>
	<string>Traceroute the Star Wars crawl.</string>
	<key>traceroute -n google.com</key>
	<string>Ignore names.</string>
	<key>vm_stat -c 10 1</key>
	<string>Repeat memory stats 10 times.</string>
	<key>vm_stat 10</key>
	<string>This updates the list every 10 seconds.  The last two columns (pageins and pageouts) indicate memory action.</string>
	<key>vmrun -T ws list</key>
	<string>List currently running VMs.</string>
	<key>wget -O /dev/null http://speedtest.wdc01.softlayer\.com/downloads/test10.zip</key>
	<string>Check broadband speed.</string>
	<key>while true ; do ps axcopid,command,%cpu | grep "foo " ; sleep 1 ; done</key>
	<string>Monitor the CPU usage of a process (trailing space will exclude foo_bar etc)</string>
	<key>xartutil --erase-all</key>
	<string>Delete the cryptokeys on disk. This will render the Mac unbootable.</string>
</dict>
</plist>
