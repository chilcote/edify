#!/usr/bin/python3

"""
This script displays information on commonly run commands.

Requirements:
        python 2.7.x
"""
##############################################################################
# Copyright 2014 Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################


__author__ = "Joseph Chilcote (chilcote@gmail.com)"
__version__ = "0.2.1"

import argparse
import os
import plistlib
import sys
import textwrap

try:
    input = raw_input
except NameError:
    pass


def colored(text, color=None):
    if not os.getenv("ANSI_COLORS_DISABLED"):
        fmt_str = "\033[%dm"
        reset = "\033[0m"
        colors = {
            "red": 31,
            "green": 32,
            "yellow": 33,
            "magenta": 35,
            "cyan": 36,
            "white": 37,
        }
        if color is not None:
            text = fmt_str % (colors[color]) + text + reset
    return text


def list_all(d):
    li = []
    for k, v in d.items():
        if "sudo" in k:
            k = k.replace("sudo ", "")
        li.append(k)
    for i in sorted(li):
        print(colored(i, "cyan"))


def add_item(d, plist):
    a = d.copy()
    command = input("Enter the command: ")
    notes = input("Enter description: ")
    a[command] = notes
    try:
        with open(plist, 'wb') as f:
            plistlib.dump(a, f)
    except UnicodeDecodeError:
        print(
            colored(
                "Encoding error. Check your command for unicode "
                + "characters and try again.",
                "red",
            )
        )
        print(colored("Command: %s" % command, "cyan"))
        with open (plist, 'wb') as f:
            plistlib.dump(d, f)
        sys.exit(1)
    print_item(command, notes)


def search_items(d, search_term):
    for k, v in sorted(d.items()):
        if all(s.lower() in k.lower() for s in search_term) or all(s.lower() in v.lower() for s in search_term):
            print_item(k, v)


def print_item(k, v):
    print('---')
    li = textwrap.wrap(v, 120)
    for i in li:
        print(colored("## %s" % i, "yellow"))
    print(colored("%s\n" % k, "cyan"))


def main():
    """Main method"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-a", "--add", help="Add entry to local plist", action="store_true"
    )
    parser.add_argument("-e", "--edit", help=argparse.SUPPRESS, action="store_true")
    parser.add_argument("-l", "--list", help="List all entries", action="store_true")
    parser.add_argument("-g", "--grep", nargs='*', help="Search entries for string")
    args = parser.parse_args()

    # Instantiate variables
    d = {}
    main_plist = os.path.join(os.getcwd(), "com.github.edify.plist")
    cached_plist = "/usr/local/share/edify/com.github.edify.plist"
    local_plist = os.path.expanduser(
        "~/Library/Application Support/edify/com.github.edify.plist"
    )

    if args.edit:
        if os.path.exists(main_plist):
            print(colored("Master Edit Mode", "yellow"))
            with open(main_plist, 'rb') as f:
                d = plistlib.load(f)
        else:
            print(colored("Master plist must be in the current directory.", "red"))
            sys.exit(1)
        add_item(d, main_plist)
        sys.exit(0)

    if os.path.exists(cached_plist):
        with open(cached_plist, 'rb') as f:
            d = plistlib.load(f)
        if os.path.exists(local_plist):
            with open(local_plist, 'rb') as f:
                d.update(plistlib.load(f))
    else:
        print(colored("File not found: %s\nPlease reinstall" % cached_plist, "red"))
        sys.exit(1)

    if args.list:
        list_all(d)
    elif args.grep:
        search_items(d, args.grep)
    elif args.add:
        d = {}
        if not os.path.exists(os.path.dirname(local_plist)):
            os.mkdir(os.path.dirname(local_plist))
        if os.path.exists(local_plist):
            with open(local_plist, 'rb') as f:
                d = plistlib.load(f)
        add_item(d, local_plist)
    else:
        parser.print_help()
        sys.exit(0)


if __name__ == "__main__":
    main()
